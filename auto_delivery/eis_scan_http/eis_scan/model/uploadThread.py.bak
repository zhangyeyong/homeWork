# coding:utf-8
# 识别增值税发票后台线程
import threading
from config.config import scanPath
import time
import copy
from tool import pathJoin
from imgHeadDao import ImgHeadDao
from imgLineDao import ImgLineDao
from uploadTaskDao import UploadTaskDao
from uploadTaskLogDao import UploadTaskLogDao
from ocrResultDao import OcrResultDao
from interface import GhEvsInterface
from config.constants import taskStatus, headStatus
import hashlib
import ftpU
import socket
import traceback
class UploadThread(threading.Thread):  # The timer class is derived from the class threading.Thread  
    imgHeadDao = ImgHeadDao()
    imgLineDao = ImgLineDao()
    uploadTaskDao = UploadTaskDao()
    uploadTaskLogDao = UploadTaskLogDao()
    ocrResultDao = OcrResultDao()
    evsInterface = GhEvsInterface()
    def __init__(self, headIds, ticket, sUser, iFtpIndex, companyCode, operationCode, lang):  
        threading.Thread.__init__(self)  
        self.headIds = headIds
        self.ticket = ticket
        self.sUser = sUser
        self.iFtpIndex = iFtpIndex
        self.companyCode = companyCode
        self.operationCode = operationCode 
        self.lang = lang
        
        # 获取ftp信息
        rtn = self.evsInterface.FtpInfo(ticket, sUser, iFtpIndex)
        if not rtn.get("isSuccess"):
            raise Exception(rtn.get("info"))
        result = rtn.get("data")
        # result 格式[10.18.221.10:21][image][image]
        result.split("]")[0][1:]
        arr = result.split("][")
        self.ftp = {
                   "ftpId" : iFtpIndex,
                   "ftpIp" : arr[0][1:].split(":")[0],
                   "ftpPort" : arr[0][1:].split(":")[1],
                   "ftpUser" : arr[1],
                   "ftpPwd" : arr[2][:-1],
        }
        
        # 获取根目录
        rtn = self.evsInterface.RelativePath(ticket, sUser, iFtpIndex)
        if not rtn.get("isSuccess"):
            raise Exception(rtn.get("info"))
        ftpRoot = rtn.get("data")
        self.ftp["ftpRoot"] = ftpRoot
    def run(self):  # Overwrite run() method, put what you want the thread do here  
        ext = "jpg"
        startTime = time.time()
        ftpIp = self.ftp.get("ftpIp")
        ftpPort = self.ftp.get("ftpPort")
        if ftpPort is None:
            ftpPort = "21"
        ftpUser = self.ftp.get("ftpUser")
        ftpPwd = self.ftp.get("ftpPwd")
        # 获取当前用户在FTP上的根目录
        ftpRoot = self.ftp.get("ftpRoot")
        
        print "call RelativePath time :%d" % (time.time() - startTime)
        for headId in self.headIds:
#             invGroup = self.invGroupDao.getById(headId)
            t1 = time.time()
            self.uploadTaskDao.updateStatusByHeadId(headId, taskStatus.UPLOADING)
            t2 = time.time()
            print "call uploadTaskDao time :%d" % (t2 - t1)
            imgHead = self.imgHeadDao.getById(headId)
            srcFileNames = []
            srcIconFileNames = []
            targetFileNames = []
            imgLines = self.imgLineDao.findByHeadId2(headId)
            headNum = imgHead.get("headNum")
            datePath = time.strftime('%Y/%m')
            relativePath = pathJoin(ftpRoot, datePath)
            MD5List = []
            pathList = []
            index = 1
            for imgLine in imgLines:
                fileNameTemp = pathJoin(scanPath, imgLine.headNum, imgLine.imgNameP)
                srcFileNames.append(fileNameTemp)
                srcIconFileNames.append(pathJoin(scanPath, imgLine.headNum, "s_"+imgLine.imgNameP))
                f = open(fileNameTemp, 'r')
                MD5List.append(hashlib.md5(f.read()).hexdigest())
                targetFileNames.append(str(index) + "." + ext)
                pathList.append(pathJoin(datePath, headNum, str(index) + "." + ext))
                index += 1
            relativePath = pathJoin(relativePath, headNum)
            # 上传影像到ftp
            flag = False
            try:
                t1 = time.time()
                flagFtp = ftpU.upload(ftpUser, ftpPwd, srcFileNames, ftpIp, ftpPort, relativePath, targetFileNames)
                ftpU.upload(ftpUser, ftpPwd, srcIconFileNames, ftpIp, ftpPort, pathJoin("icon",relativePath), targetFileNames)
                t2 = time.time()
                print "call ftpU.upload time :%d" % (t2 - t1) 
                if flagFtp:                
                # 同步上传影像的信息 TODO
                    iScanType = 6  # 从组信息中取  现在好像都是覆盖方式
                    sIP = socket.gethostbyname(socket.gethostname())  # 得到本地ip
                    # param = "[影像文件编号][影像任务编号][图像张数][图像扩展名][每张图片的MD5值，其中每张图片MD5值用符号;分隔][扫描时间][每张图片存放路径，不同图片用符号;分隔][][图像批注][有无报账单标识]"
                    headDesc = imgHead.get("headDesc")
                    if not headDesc:
                        headDesc = ""
                    param = "[" + headNum + "][" + headNum + "][" + str(len(imgLines)) + "][" + ext + "][" + ";".join(MD5List) + "][" + time.strftime('%Y-%m-%d %H:%M:%S') + "][" + ";".join(pathList) + "][]["+headDesc+"][Y]"
                    print "------------self.ticket:%s, iScanType:%s, ftpPath:%s, sIP:%s------->param:%s" % (self.ticket, iScanType, ftpRoot, sIP, param)
                    t1 = time.time()
                    uploadLogFlag = self.evsInterface.UploadLog(self.ticket, iScanType, relativePath, sIP, param, self.ftp.get("ftpId"), self.companyCode, self.operationCode, self.lang).get("data") == 0
                    t2 = time.time()
                    print "call client.service.UploadLog time :%d" % (t2 - t1)
                    print "---------->uploadLogFlag:" + str(uploadLogFlag)
                    flag = flagFtp and uploadLogFlag
            except:
                traceback.print_exc()
                print "upload has exception"
                pass
            status = headStatus.FAILURE 
            # 在删除之前，先查询出数据，用于插入日志表
            uploadTask = self.uploadTaskDao.getByHeadId(headId)
            if flag: 
                status = headStatus.SUCCESS
                # 删除任务
                self.uploadTaskDao.deleteByHeadId(headId)
            else:
                # 修改状态
                self.uploadTaskDao.updateStatusByHeadId(headId, status)
            # 插入上传任务历史表
            t1 = time.time()
            uploadTaskLog = copy.deepcopy(uploadTask)
            uploadTaskLog.pop("uploadTaskId")
            uploadTaskLog['status'] = status
            
            self.uploadTaskLogDao.save(uploadTaskLog)
            # 修改组状态
            self.imgHeadDao.updateStatusByheadId(headId, status)
            t2 = time.time()
            print "update status time :%d" % (t2 - t1)
        endTime = time.time()
        print "总时间%d" % (endTime - startTime)
if __name__ == "__main__":
#     ftpRoot = "images"
#     headNum = "test1"
#     relativePath = pathJoin(ftpRoot, time.strftime('%Y/%m') , headNum)
#     print relativePath
    str = 'abcd,e'
    l = list(str)
    print l
    print ';'.join(l)
    pass
